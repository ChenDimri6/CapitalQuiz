{"ast":null,"code":"const NUM_OF_COUNTRIES_IN_QUIZ = 5;\nasync function getCountriesList() {\n  try {\n    const request = await fetch('https://restcountries.com/v3.1/all?fields=name,capital');\n    const data = await request.json();\n    for (const item of data) {\n      item.country = item.name.common;\n      item.capital = item.capital[0];\n    }\n    const shuffled = data.sort(() => 0.5 - Math.random());\n    let selected = shuffled.slice(0, NUM_OF_COUNTRIES_IN_QUIZ);\n    let countriesForGame = [];\n    let counter = 0;\n    for (const country of selected) {\n      country.name = country.country;\n      country.isMatched = false;\n      country.isWrong = false;\n      country.id = counter;\n      const capital = {\n        name: country.capital,\n        country: country.country,\n        id: counter + 1,\n        isMatched: false,\n        isWrong: false,\n        capital: country.capital\n      };\n      countriesForGame.push(capital);\n      countriesForGame.push(country);\n      counter += 2;\n    }\n    console.log(\"countriesForGamer\", countriesForGame);\n    return countriesForGame;\n  } catch (err) {\n    console.log(err.message);\n    return [];\n  }\n}\nexport default getCountriesList;","map":{"version":3,"names":["NUM_OF_COUNTRIES_IN_QUIZ","getCountriesList","request","fetch","data","json","item","country","name","common","capital","shuffled","sort","Math","random","selected","slice","countriesForGame","counter","isMatched","isWrong","id","push","console","log","err","message"],"sources":["/Users/chendimri/Desktop/CapitalQuiz/src/server/getCountriesList.ts"],"sourcesContent":["import ICard from \"../interfaces/CardInterface\";\n\nconst NUM_OF_COUNTRIES_IN_QUIZ = 5;\n\nasync function getCountriesList() {\n    try {\n        const request = await fetch('https://restcountries.com/v3.1/all?fields=name,capital');\n        const data = await request.json();\n\n        for (const item of data) {\n            item.country = item.name.common;\n            item.capital = item.capital[0];\n        }\n\n        const shuffled = data.sort(() => 0.5 - Math.random());\n        let selected = shuffled.slice(0, NUM_OF_COUNTRIES_IN_QUIZ);\n        let countriesForGame: ICard[] = [];\n        let counter = 0;\n\n        for (const country of selected) {\n            country.name = country.country;\n            country.isMatched = false;\n            country.isWrong = false;\n            country.id = counter;\n\n            const capital = { name: country.capital, country: country.country, id: counter+1, isMatched: false, isWrong: false, \n                capital: country.capital };\n\n            countriesForGame.push(capital);\n            countriesForGame.push(country);\n            counter += 2;\n        }\n\n        console.log(\"countriesForGamer\", countriesForGame)\n        return countriesForGame;\n    } catch(err){\n        console.log(err.message);\n        return [];\n    }\n}\n\nexport default getCountriesList;\n"],"mappings":"AAEA,MAAMA,wBAAwB,GAAG,CAAC;AAElC,eAAeC,gBAAgBA,CAAA,EAAG;EAC9B,IAAI;IACA,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAAC,wDAAwD,CAAC;IACrF,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,IAAI,CAAC,CAAC;IAEjC,KAAK,MAAMC,IAAI,IAAIF,IAAI,EAAE;MACrBE,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACE,IAAI,CAACC,MAAM;MAC/BH,IAAI,CAACI,OAAO,GAAGJ,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC;IAClC;IAEA,MAAMC,QAAQ,GAAGP,IAAI,CAACQ,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IACrD,IAAIC,QAAQ,GAAGJ,QAAQ,CAACK,KAAK,CAAC,CAAC,EAAEhB,wBAAwB,CAAC;IAC1D,IAAIiB,gBAAyB,GAAG,EAAE;IAClC,IAAIC,OAAO,GAAG,CAAC;IAEf,KAAK,MAAMX,OAAO,IAAIQ,QAAQ,EAAE;MAC5BR,OAAO,CAACC,IAAI,GAAGD,OAAO,CAACA,OAAO;MAC9BA,OAAO,CAACY,SAAS,GAAG,KAAK;MACzBZ,OAAO,CAACa,OAAO,GAAG,KAAK;MACvBb,OAAO,CAACc,EAAE,GAAGH,OAAO;MAEpB,MAAMR,OAAO,GAAG;QAAEF,IAAI,EAAED,OAAO,CAACG,OAAO;QAAEH,OAAO,EAAEA,OAAO,CAACA,OAAO;QAAEc,EAAE,EAAEH,OAAO,GAAC,CAAC;QAAEC,SAAS,EAAE,KAAK;QAAEC,OAAO,EAAE,KAAK;QAC9GV,OAAO,EAAEH,OAAO,CAACG;MAAQ,CAAC;MAE9BO,gBAAgB,CAACK,IAAI,CAACZ,OAAO,CAAC;MAC9BO,gBAAgB,CAACK,IAAI,CAACf,OAAO,CAAC;MAC9BW,OAAO,IAAI,CAAC;IAChB;IAEAK,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEP,gBAAgB,CAAC;IAClD,OAAOA,gBAAgB;EAC3B,CAAC,CAAC,OAAMQ,GAAG,EAAC;IACRF,OAAO,CAACC,GAAG,CAACC,GAAG,CAACC,OAAO,CAAC;IACxB,OAAO,EAAE;EACb;AACJ;AAEA,eAAezB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}