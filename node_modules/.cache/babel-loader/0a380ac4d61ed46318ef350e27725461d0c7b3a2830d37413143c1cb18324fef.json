{"ast":null,"code":"var _jsxFileName = \"/Users/chendimri/Desktop/CapitalQuiz/capital-quiz/src/components/QuizBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { cardsData } from \"../data\";\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizBoard() {\n  _s();\n  let [cardsState, setCardsState] = useState(cardsData);\n  // kep first card info\n  let [firstCard, setFirstCard] = useState(null);\n  // is it first click?\n  let [secondClick, setSecondCard] = useState(false);\n  // set flag to wait for 1500ms\n  let [wait, setWait] = useState(false);\n\n  // functions\n  const checker = async card => {\n    if (firstCard !== null && card.id != firstCard.id) {\n      setSecondCard(card);\n    } else {\n      setFirstCard(card);\n    }\n  };\n  React.useEffect(() => {\n    if (firstCard && secondCard) {\n      setStopFlip(true);\n      if (firstCard.name === secondCard.name) {\n        setCardsArray(prevArray => {\n          return prevArray.map(unit => {\n            if (unit.name === firstCard.name) {\n              return {\n                ...unit,\n                matched: true\n              };\n            } else {\n              return unit;\n            }\n          });\n        });\n        setWon(preVal => preVal + 1);\n        removeSelection();\n      } else {\n        setTimeout(() => {\n          removeSelection();\n        }, 1000);\n      }\n    }\n  }, [firstCard, secondCard]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"memory-game\",\n    children: cardsState === null || cardsState === void 0 ? void 0 : cardsState.map(card => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        onClick: e => handleClick(e, card)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(QuizBoard, \"A+bv2HM2RBB0ugtq6qiCSlt+T9Y=\");\n_c = QuizBoard;\nexport default QuizBoard;\nvar _c;\n$RefreshReg$(_c, \"QuizBoard\");","map":{"version":3,"names":["React","useState","cardsData","Card","jsxDEV","_jsxDEV","QuizBoard","_s","cardsState","setCardsState","firstCard","setFirstCard","secondClick","setSecondCard","wait","setWait","checker","card","id","useEffect","secondCard","setStopFlip","name","setCardsArray","prevArray","map","unit","matched","setWon","preVal","removeSelection","setTimeout","className","children","onClick","e","handleClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chendimri/Desktop/CapitalQuiz/capital-quiz/src/components/QuizBoard.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { cardsData } from \"../data\";\nimport Card from './Card';\n\n\nfunction QuizBoard() {\n    let [cardsState, setCardsState] = useState(cardsData);\n    // kep first card info\n    let [firstCard, setFirstCard] = useState(null);\n    // is it first click?\n    let [secondClick, setSecondCard] = useState(false);\n    // set flag to wait for 1500ms\n    let [wait, setWait] = useState(false);\n\n    // functions\n    const checker = async (card) => {\n        if (firstCard !== null && card.id != firstCard.id) {\n            setSecondCard(card); \n        } else { \n            setFirstCard(card);\n        }\n  };\n\n  React.useEffect(() => { \n    if (firstCard && secondCard) { \n        setStopFlip(true); \n        if (firstCard.name === secondCard.name) { \n            setCardsArray((prevArray) => { \n                return prevArray.map((unit) => { \n                    if (unit.name === firstCard.name) { \n                        return { ...unit, matched: true }; \n                    } else { \n                        return unit; \n                    } \n                }); \n            }); \n            setWon((preVal) => preVal + 1); \n            removeSelection(); \n        } else { \n            setTimeout(() => { \n                removeSelection(); \n            }, 1000); \n        } \n    } \n}, [firstCard, secondCard]); \n\n    return (\n        <section className=\"memory-game\">\n          {cardsState?.map((card) => {\n            return (\n              <Card\n                key={card.id}\n                card={card}\n                onClick={(e) => handleClick(e, card)}\n              />\n            );\n          })}\n        </section>\n      ); \n}\n\nexport default QuizBoard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,SAAS;AACnC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,IAAI,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAACC,SAAS,CAAC;EACrD;EACA,IAAI,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9C;EACA,IAAI,CAACW,WAAW,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAClD;EACA,IAAI,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAErC;EACA,MAAMe,OAAO,GAAG,MAAOC,IAAI,IAAK;IAC5B,IAAIP,SAAS,KAAK,IAAI,IAAIO,IAAI,CAACC,EAAE,IAAIR,SAAS,CAACQ,EAAE,EAAE;MAC/CL,aAAa,CAACI,IAAI,CAAC;IACvB,CAAC,MAAM;MACHN,YAAY,CAACM,IAAI,CAAC;IACtB;EACN,CAAC;EAEDjB,KAAK,CAACmB,SAAS,CAAC,MAAM;IACpB,IAAIT,SAAS,IAAIU,UAAU,EAAE;MACzBC,WAAW,CAAC,IAAI,CAAC;MACjB,IAAIX,SAAS,CAACY,IAAI,KAAKF,UAAU,CAACE,IAAI,EAAE;QACpCC,aAAa,CAAEC,SAAS,IAAK;UACzB,OAAOA,SAAS,CAACC,GAAG,CAAEC,IAAI,IAAK;YAC3B,IAAIA,IAAI,CAACJ,IAAI,KAAKZ,SAAS,CAACY,IAAI,EAAE;cAC9B,OAAO;gBAAE,GAAGI,IAAI;gBAAEC,OAAO,EAAE;cAAK,CAAC;YACrC,CAAC,MAAM;cACH,OAAOD,IAAI;YACf;UACJ,CAAC,CAAC;QACN,CAAC,CAAC;QACFE,MAAM,CAAEC,MAAM,IAAKA,MAAM,GAAG,CAAC,CAAC;QAC9BC,eAAe,CAAC,CAAC;MACrB,CAAC,MAAM;QACHC,UAAU,CAAC,MAAM;UACbD,eAAe,CAAC,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC;MACZ;IACJ;EACJ,CAAC,EAAE,CAACpB,SAAS,EAAEU,UAAU,CAAC,CAAC;EAEvB,oBACIf,OAAA;IAAS2B,SAAS,EAAC,aAAa;IAAAC,QAAA,EAC7BzB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEiB,GAAG,CAAER,IAAI,IAAK;MACzB,oBACEZ,OAAA,CAACF,IAAI;QAEHc,IAAI,EAAEA,IAAK;QACXiB,OAAO,EAAGC,CAAC,IAAKC,WAAW,CAACD,CAAC,EAAElB,IAAI;MAAE,GAFhCA,IAAI,CAACC,EAAE;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CAAC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAElB;AAACjC,EAAA,CAtDQD,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AAwDlB,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}