{"ast":null,"code":"var _jsxFileName = \"/Users/chendimri/Desktop/CapitalQuiz/capital-quiz/src/components/QuizBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CardsData from \"../data\";\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizBoard() {\n  _s();\n  let [cardsState, setCardsArray] = useState();\n  // kep first card info\n  let [firstCard, setFirstCard] = useState();\n  // is it first click?\n  let [secondCard, setSecondCard] = useState();\n  // set flag to wait for 3000ms\n  let [wait, setWait] = useState(false);\n  const [won, setWon] = React.useState(0);\n\n  // functions\n  const handleSelectedCards = async card => {\n    if (firstCard !== null && card.id != (firstCard === null || firstCard === void 0 ? void 0 : firstCard.id)) {\n      setSecondCard(card);\n    } else {\n      setFirstCard(card);\n    }\n  };\n  const NewGame = () => {\n    setTimeout(() => {\n      const randomOrderArray = CardsData.sort(() => 0.5 - Math.random());\n      setCardsArray(randomOrderArray);\n      setFirstCard({});\n      setSecondCard({});\n      setWon(0);\n    }, 1200);\n  };\n  React.useEffect(() => {\n    NewGame();\n  }, []);\n\n  //   React.useEffect(() => { \n  //     if (firstCard && secondCard) { \n  //         if (firstCard.name === secondCard.country || firstCard.capital == secondCard.name) { \n  //             setCardsArray((prevArray) => { \n  //                 return prevArray.map((item) => { \n  //                     if (item.id ==! firstCard.id && item.id ==! secondCard.id) { \n  //                         return item; \n  //                     }\n  //                 }); \n  //             }); \n  //             setWon((preVal) => preVal + 1); \n  //             removeSelection(); \n  //         } else { \n  //             setTimeout(() => { \n  //                 removeSelection(); \n  //             }, 1000); \n  //         } \n  //     } \n  // }, [firstCard, secondCard]); \n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"memory-game\",\n    children: cardsState === null || cardsState === void 0 ? void 0 : cardsState.map(card => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        onClick: e => handleSelectedCards(card)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(QuizBoard, \"N7kF65SVH6sTbmpBTXKElXNIDTY=\");\n_c = QuizBoard;\nexport default QuizBoard;\nvar _c;\n$RefreshReg$(_c, \"QuizBoard\");","map":{"version":3,"names":["React","useState","CardsData","Card","jsxDEV","_jsxDEV","QuizBoard","_s","cardsState","setCardsArray","firstCard","setFirstCard","secondCard","setSecondCard","wait","setWait","won","setWon","handleSelectedCards","card","id","NewGame","setTimeout","randomOrderArray","sort","Math","random","useEffect","className","children","map","onClick","e","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chendimri/Desktop/CapitalQuiz/capital-quiz/src/components/QuizBoard.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport CardsData from \"../data\";\nimport Card from './Card';\n\ninterface ICard{\n    id?: number,\n    name?: string,\n    country?: string,\n    capital?: string\n}\n\nfunction QuizBoard() {\n    let [cardsState, setCardsArray] = useState<ICard[]>();\n    // kep first card info\n    let [firstCard, setFirstCard] = useState<ICard>();\n    // is it first click?\n    let [secondCard, setSecondCard] = useState<ICard>();\n    // set flag to wait for 3000ms\n    let [wait, setWait] = useState(false);\n    const [won, setWon] = React.useState(0); \n\n\n    // functions\n    const handleSelectedCards = async (card) => {\n        if (firstCard !== null && card.id != firstCard?.id) {\n            setSecondCard(card); \n        } else { \n            setFirstCard(card);\n        }\n  };\n\n  const NewGame = () => { \n    setTimeout(() => { \n        const randomOrderArray = CardsData.sort(() => 0.5 - Math.random()); \n        setCardsArray(randomOrderArray); \n        setFirstCard({}); \n        setSecondCard({}); \n        setWon(0); \n    }, 1200); \n}\n\n  React.useEffect(() => { \n    NewGame(); \n}, []); \n\n//   React.useEffect(() => { \n//     if (firstCard && secondCard) { \n//         if (firstCard.name === secondCard.country || firstCard.capital == secondCard.name) { \n//             setCardsArray((prevArray) => { \n//                 return prevArray.map((item) => { \n//                     if (item.id ==! firstCard.id && item.id ==! secondCard.id) { \n//                         return item; \n//                     }\n//                 }); \n//             }); \n//             setWon((preVal) => preVal + 1); \n//             removeSelection(); \n//         } else { \n//             setTimeout(() => { \n//                 removeSelection(); \n//             }, 1000); \n//         } \n//     } \n// }, [firstCard, secondCard]); \n\n    return (\n        <section className=\"memory-game\">\n          {cardsState?.map((card) => {\n            return (\n              <Card\n                key={card.id}\n                card={card}\n                onClick={(e) => handleSelectedCards(card)}\n              />\n            );\n          })}\n        </section>\n      ); \n}\n\nexport default QuizBoard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,SAAS;AAC/B,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,IAAI,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAU,CAAC;EACrD;EACA,IAAI,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAQ,CAAC;EACjD;EACA,IAAI,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAQ,CAAC;EACnD;EACA,IAAI,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACrC,MAAM,CAACe,GAAG,EAAEC,MAAM,CAAC,GAAGjB,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC;;EAGvC;EACA,MAAMiB,mBAAmB,GAAG,MAAOC,IAAI,IAAK;IACxC,IAAIT,SAAS,KAAK,IAAI,IAAIS,IAAI,CAACC,EAAE,KAAIV,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEU,EAAE,GAAE;MAChDP,aAAa,CAACM,IAAI,CAAC;IACvB,CAAC,MAAM;MACHR,YAAY,CAACQ,IAAI,CAAC;IACtB;EACN,CAAC;EAED,MAAME,OAAO,GAAGA,CAAA,KAAM;IACpBC,UAAU,CAAC,MAAM;MACb,MAAMC,gBAAgB,GAAGrB,SAAS,CAACsB,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;MAClEjB,aAAa,CAACc,gBAAgB,CAAC;MAC/BZ,YAAY,CAAC,CAAC,CAAC,CAAC;MAChBE,aAAa,CAAC,CAAC,CAAC,CAAC;MACjBI,MAAM,CAAC,CAAC,CAAC;IACb,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;EAECjB,KAAK,CAAC2B,SAAS,CAAC,MAAM;IACpBN,OAAO,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI,oBACIhB,OAAA;IAASuB,SAAS,EAAC,aAAa;IAAAC,QAAA,EAC7BrB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEsB,GAAG,CAAEX,IAAI,IAAK;MACzB,oBACEd,OAAA,CAACF,IAAI;QAEHgB,IAAI,EAAEA,IAAK;QACXY,OAAO,EAAGC,CAAC,IAAKd,mBAAmB,CAACC,IAAI;MAAE,GAFrCA,IAAI,CAACC,EAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CAAC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAElB;AAAC7B,EAAA,CAnEQD,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAqElB,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}