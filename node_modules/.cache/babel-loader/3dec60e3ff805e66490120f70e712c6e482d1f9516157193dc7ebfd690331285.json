{"ast":null,"code":"var _jsxFileName = \"/Users/chendimri/Desktop/CapitalQuiz/capital-quiz/src/components/QuizBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { cardsData } from \"../data\";\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizBoard() {\n  _s();\n  let [cardsState, setCardsArray] = useState([]);\n  // kep first card info\n  let [firstCard, setFirstCard] = useState(null);\n  // is it first click?\n  let [secondCard, setSecondCard] = useState(null);\n  // set flag to wait for 3000ms\n  let [wait, setWait] = useState(false);\n  const [won, setWon] = React.useState(0);\n\n  // functions\n  const checker = async card => {\n    if (firstCard !== null && card.id != firstCard.id) {\n      setSecondCard(card);\n    } else {\n      setFirstCard(card);\n    }\n  };\n  const NewGame = () => {\n    setTimeout(() => {\n      const randomOrderArray = cardsData.sort(() => 0.5 - Math.random());\n      setCardsArray(randomOrderArray);\n      setFirstCard(null);\n      setSecondCard(null);\n      setWon(0);\n    }, 1200);\n  };\n  React.useEffect(() => {\n    NewGame();\n  }, []);\n  React.useEffect(() => {\n    if (firstCard && secondCard) {\n      if (firstCard.name === secondCard.country || firstCard.capital == secondCard.name) {\n        setCardsArray(prevArray => {\n          return prevArray.map(item => {\n            if (item.id == !firstCard.id && item.id == !secondCard.id) {\n              return item;\n            }\n          });\n        });\n        setWon(preVal => preVal + 1);\n        removeSelection();\n      } else {\n        setTimeout(() => {\n          removeSelection();\n        }, 1000);\n      }\n    }\n  }, [firstCard, secondCard]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"memory-game\",\n    children: cardsState === null || cardsState === void 0 ? void 0 : cardsState.map(card => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        onClick: e => handleClick(e, card)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(QuizBoard, \"E3P13Vgs6KxcYCWn2xFl9+3W86Q=\");\n_c = QuizBoard;\nexport default QuizBoard;\nvar _c;\n$RefreshReg$(_c, \"QuizBoard\");","map":{"version":3,"names":["React","useState","cardsData","Card","jsxDEV","_jsxDEV","QuizBoard","_s","cardsState","setCardsArray","firstCard","setFirstCard","secondCard","setSecondCard","wait","setWait","won","setWon","checker","card","id","NewGame","setTimeout","randomOrderArray","sort","Math","random","useEffect","name","country","capital","prevArray","map","item","preVal","removeSelection","className","children","onClick","e","handleClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chendimri/Desktop/CapitalQuiz/capital-quiz/src/components/QuizBoard.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { cardsData } from \"../data\";\nimport Card from './Card';\n\ninterface Props {\n    items: {}\n}\n\nfunction QuizBoard() {\n    let [cardsState, setCardsArray] = useState([]);\n    // kep first card info\n    let [firstCard, setFirstCard] = useState(null);\n    // is it first click?\n    let [secondCard, setSecondCard] = useState(null);\n    // set flag to wait for 3000ms\n    let [wait, setWait] = useState(false);\n    const [won, setWon] = React.useState(0); \n\n\n    // functions\n    const checker = async (card) => {\n        if (firstCard !== null && card.id != firstCard.id) {\n            setSecondCard(card); \n        } else { \n            setFirstCard(card);\n        }\n  };\n\n  const NewGame = () => { \n    setTimeout(() => { \n        const randomOrderArray = cardsData.sort(() => 0.5 - Math.random()); \n        setCardsArray(randomOrderArray); \n        setFirstCard(null); \n        setSecondCard(null); \n        setWon(0); \n    }, 1200); \n}\n\n  React.useEffect(() => { \n    NewGame(); \n}, []); \n\n  React.useEffect(() => { \n    if (firstCard && secondCard) { \n        if (firstCard.name === secondCard.country || firstCard.capital == secondCard.name) { \n            setCardsArray((prevArray) => { \n                return prevArray.map((item) => { \n                    if (item.id ==! firstCard.id && item.id ==! secondCard.id) { \n                        return item; \n                    }\n                }); \n            }); \n            setWon((preVal) => preVal + 1); \n            removeSelection(); \n        } else { \n            setTimeout(() => { \n                removeSelection(); \n            }, 1000); \n        } \n    } \n}, [firstCard, secondCard]); \n\n    return (\n        <section className=\"memory-game\">\n          {cardsState?.map((card) => {\n            return (\n              <Card\n                key={card.id}\n                card={card}\n                onClick={(e) => handleClick(e, card)}\n              />\n            );\n          })}\n        </section>\n      ); \n}\n\nexport default QuizBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}