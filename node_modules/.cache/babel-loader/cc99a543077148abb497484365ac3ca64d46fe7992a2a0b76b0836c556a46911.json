{"ast":null,"code":"var _jsxFileName = \"/Users/chendimri/Desktop/CapitalQuiz/capital-quiz/src/components/QuizBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { cardsData } from \"../data\";\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizBoard() {\n  _s();\n  let [cardsState, setCardsState] = useState(cardsData);\n  // kep first card info\n  let [firstCard, setFirstCard] = useState({\n    name: null\n  });\n  // is it first click?\n  let [secondClick, setSecondClick] = useState(false);\n  // set flag to wait for 1500ms\n  let [wait, setWait] = useState(false);\n\n  // functions\n  const checker = async card => {\n    if (card.name === firstCard.name) {\n      console.log(\"hellooo\");\n      card[\"passed\"] = true;\n      firstCard[\"passed\"] = true;\n      changeCardStatusHandler(card);\n      changeCardStatusHandler(firstCard);\n    } else {\n      setWait(true);\n      setTimeout(() => {\n        changeCardStatusHandler(card);\n        changeCardStatusHandler(firstCard);\n        setWait(false);\n      }, 1500);\n    }\n  };\n  const changeCardStatusHandler = async clickedCard => {\n    if (!clickedCard.passed) clickedCard.isFlipped = !clickedCard.isFlipped;\n    let index = cardsState.findIndex(card => card.id === clickedCard.id);\n    let newState = [...cardsState];\n    newState.splice(index, 1, clickedCard);\n    await setCardsState(newState);\n  };\n  const handleClick = async (e, clickedCard) => {\n    if (wait) {\n      return;\n    }\n    if (!secondClick) {\n      await setFirstCard(clickedCard);\n      await setSecondClick(true);\n      changeCardStatusHandler(clickedCard);\n    } else {\n      await setSecondClick(false);\n      changeCardStatusHandler(clickedCard);\n      checker(clickedCard);\n      setFirstCard(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"memory-game\",\n    children: cardsState === null || cardsState === void 0 ? void 0 : cardsState.map(card => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        onClick: e => handleClick(e, card)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(QuizBoard, \"kNGSUqbH95V4vHhRa695vYkfGbo=\");\n_c = QuizBoard;\nexport default QuizBoard;\nvar _c;\n$RefreshReg$(_c, \"QuizBoard\");","map":{"version":3,"names":["React","useState","cardsData","Card","jsxDEV","_jsxDEV","QuizBoard","_s","cardsState","setCardsState","firstCard","setFirstCard","name","secondClick","setSecondClick","wait","setWait","checker","card","console","log","changeCardStatusHandler","setTimeout","clickedCard","passed","isFlipped","index","findIndex","id","newState","splice","handleClick","e","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chendimri/Desktop/CapitalQuiz/capital-quiz/src/components/QuizBoard.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { cardsData } from \"../data\";\nimport Card from './Card';\n\n\nfunction QuizBoard() {\n    let [cardsState, setCardsState] = useState(cardsData);\n    // kep first card info\n    let [firstCard, setFirstCard] = useState({name: null});\n    // is it first click?\n    let [secondClick, setSecondClick] = useState(false);\n    // set flag to wait for 1500ms\n    let [wait, setWait] = useState(false);\n\n    // functions\n    const checker = async (card) => {\n        if (card.name === firstCard.name) {\n            console.log(\"hellooo\");\n            card[\"passed\"] = true;\n            firstCard[\"passed\"] = true;\n            changeCardStatusHandler(card);\n            changeCardStatusHandler(firstCard);\n        } else {\n            setWait(true);\n            setTimeout(() => {\n                changeCardStatusHandler(card);\n                changeCardStatusHandler(firstCard);\n                setWait(false);\n        }, 1500);\n        }\n  };\n\n    const changeCardStatusHandler = async (clickedCard) => {\n        if (!clickedCard.passed) clickedCard.isFlipped = !clickedCard.isFlipped;\n        let index = cardsState.findIndex((card) => card.id === clickedCard.id);\n        let newState = [...cardsState];\n        newState.splice(index, 1, clickedCard);\n        await setCardsState(newState);\n    };\n    const handleClick = async (e, clickedCard) => {\n        if (wait) {\n            return;\n        }\n        if (!secondClick) {\n            await setFirstCard(clickedCard);\n            await setSecondClick(true);\n            changeCardStatusHandler(clickedCard);\n            } else {\n            await setSecondClick(false);\n            changeCardStatusHandler(clickedCard);\n            checker(clickedCard);\n            setFirstCard(null);\n        }\n    };\n\n    return (\n        <section className=\"memory-game\">\n          {cardsState?.map((card) => {\n            return (\n              <Card\n                key={card.id}\n                card={card}\n                onClick={(e) => handleClick(e, card)}\n              />\n            );\n          })}\n        </section>\n      ); \n}\n\nexport default QuizBoard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,SAAS;AACnC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,IAAI,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAACC,SAAS,CAAC;EACrD;EACA,IAAI,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC;IAACW,IAAI,EAAE;EAAI,CAAC,CAAC;EACtD;EACA,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD;EACA,IAAI,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAErC;EACA,MAAMgB,OAAO,GAAG,MAAOC,IAAI,IAAK;IAC5B,IAAIA,IAAI,CAACN,IAAI,KAAKF,SAAS,CAACE,IAAI,EAAE;MAC9BO,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtBF,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI;MACrBR,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI;MAC1BW,uBAAuB,CAACH,IAAI,CAAC;MAC7BG,uBAAuB,CAACX,SAAS,CAAC;IACtC,CAAC,MAAM;MACHM,OAAO,CAAC,IAAI,CAAC;MACbM,UAAU,CAAC,MAAM;QACbD,uBAAuB,CAACH,IAAI,CAAC;QAC7BG,uBAAuB,CAACX,SAAS,CAAC;QAClCM,OAAO,CAAC,KAAK,CAAC;MACtB,CAAC,EAAE,IAAI,CAAC;IACR;EACN,CAAC;EAEC,MAAMK,uBAAuB,GAAG,MAAOE,WAAW,IAAK;IACnD,IAAI,CAACA,WAAW,CAACC,MAAM,EAAED,WAAW,CAACE,SAAS,GAAG,CAACF,WAAW,CAACE,SAAS;IACvE,IAAIC,KAAK,GAAGlB,UAAU,CAACmB,SAAS,CAAET,IAAI,IAAKA,IAAI,CAACU,EAAE,KAAKL,WAAW,CAACK,EAAE,CAAC;IACtE,IAAIC,QAAQ,GAAG,CAAC,GAAGrB,UAAU,CAAC;IAC9BqB,QAAQ,CAACC,MAAM,CAACJ,KAAK,EAAE,CAAC,EAAEH,WAAW,CAAC;IACtC,MAAMd,aAAa,CAACoB,QAAQ,CAAC;EACjC,CAAC;EACD,MAAME,WAAW,GAAG,MAAAA,CAAOC,CAAC,EAAET,WAAW,KAAK;IAC1C,IAAIR,IAAI,EAAE;MACN;IACJ;IACA,IAAI,CAACF,WAAW,EAAE;MACd,MAAMF,YAAY,CAACY,WAAW,CAAC;MAC/B,MAAMT,cAAc,CAAC,IAAI,CAAC;MAC1BO,uBAAuB,CAACE,WAAW,CAAC;IACpC,CAAC,MAAM;MACP,MAAMT,cAAc,CAAC,KAAK,CAAC;MAC3BO,uBAAuB,CAACE,WAAW,CAAC;MACpCN,OAAO,CAACM,WAAW,CAAC;MACpBZ,YAAY,CAAC,IAAI,CAAC;IACtB;EACJ,CAAC;EAED,oBACIN,OAAA;IAAS4B,SAAS,EAAC,aAAa;IAAAC,QAAA,EAC7B1B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE2B,GAAG,CAAEjB,IAAI,IAAK;MACzB,oBACEb,OAAA,CAACF,IAAI;QAEHe,IAAI,EAAEA,IAAK;QACXkB,OAAO,EAAGJ,CAAC,IAAKD,WAAW,CAACC,CAAC,EAAEd,IAAI;MAAE,GAFhCA,IAAI,CAACU,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CAAC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAElB;AAACjC,EAAA,CA/DQD,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AAiElB,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}