{"ast":null,"code":"var _jsxFileName = \"/Users/chendimri/Desktop/CapitalQuiz/src/components/QuizBoard/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport removeCardsFromGame from './logic/removeCardsFromGame';\nimport changeIsWrongForSelectedCards from \"./logic/changeIsWrongForSelectedCards\";\nimport Header from \"../Header\";\nimport WinningBanner from \"../WinningBanner\";\nimport getCountriesList from \"../../server/getCountriesList/getCountriesListLogic\";\nimport CardsBoard from \"../CardsBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizBoard() {\n  _s();\n  let [cardsArray, setCardsArray] = useState();\n  let [firstCard, setFirstCard] = useState();\n  let [secondCard, setSecondCard] = useState();\n  let [toDisable, setToDisable] = useState();\n\n  //Handling selecting a card\n  const handleSelectedCards = async card => {\n    firstCard && card.id !== (firstCard === null || firstCard === void 0 ? void 0 : firstCard.id) ? setSecondCard(card) : setFirstCard(card);\n  };\n\n  //Clear the chosen cards\n  const removeSelection = () => {\n    setFirstCard(null);\n    setSecondCard(null);\n  };\n\n  //Setting a new game\n  useEffect(() => {\n    setTimeout(async () => {\n      const cardsData = await getCountriesList();\n      setCardsArray(cardsData);\n      setFirstCard(null);\n      setSecondCard(null);\n      setToDisable(false);\n    }, 10);\n  }, []);\n\n  //Chekcing if theres a match between the chosen cards\n  useEffect(() => {\n    if (firstCard && secondCard) {\n      //If theres a match we remove the cards from the game by hiding them (in order to not delete data)\n      if (firstCard.country === secondCard.country) {\n        setCardsArray(removeCardsFromGame(cardsArray, firstCard, secondCard));\n        removeSelection();\n\n        //Otherwise marking wrong match for styling and disabling choosing cards for 3 seconds\n      } else {\n        setCardsArray(changeIsWrongForSelectedCards(cardsArray, true, firstCard, secondCard));\n        setToDisable(true);\n        setTimeout(() => {\n          setToDisable(false);\n          setCardsArray(changeIsWrongForSelectedCards(cardsArray, false, firstCard, secondCard));\n          removeSelection();\n        }, 3000);\n      }\n    }\n  }, [firstCard, secondCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardsBoard, {\n      cardsArray: cardsArray,\n      handleSelectedCards: handleSelectedCards,\n      firstCard: firstCard,\n      toDisable: toDisable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WinningBanner, {\n      cardsArray: cardsArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(QuizBoard, \"rs0942ufVnOFqcc8j6bbSAuG5rQ=\");\n_c = QuizBoard;\nexport default QuizBoard;\nvar _c;\n$RefreshReg$(_c, \"QuizBoard\");","map":{"version":3,"names":["React","useState","useEffect","removeCardsFromGame","changeIsWrongForSelectedCards","Header","WinningBanner","getCountriesList","CardsBoard","jsxDEV","_jsxDEV","QuizBoard","_s","cardsArray","setCardsArray","firstCard","setFirstCard","secondCard","setSecondCard","toDisable","setToDisable","handleSelectedCards","card","id","removeSelection","setTimeout","cardsData","country","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chendimri/Desktop/CapitalQuiz/src/components/QuizBoard/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport removeCardsFromGame from './logic/removeCardsFromGame';\nimport changeIsWrongForSelectedCards from \"./logic/changeIsWrongForSelectedCards\";\nimport Header from \"../Header\";\nimport WinningBanner from \"../WinningBanner\";\nimport ICard from \"../../interfaces/CardInterface\";\nimport getCountriesList from \"../../server/getCountriesList/getCountriesListLogic\";\nimport CardsBoard from \"../CardsBoard\";\n\nfunction QuizBoard() {\n    let [cardsArray, setCardsArray] = useState<ICard[] | null>();\n    let [firstCard, setFirstCard] = useState<ICard | null>();\n    let [secondCard, setSecondCard] = useState<ICard | null>();\n    let [toDisable, setToDisable] = useState<boolean>();\n\n    //Handling selecting a card\n    const handleSelectedCards = async (card) => {\n        firstCard && card.id !== firstCard?.id ?\n            setSecondCard(card) :  \n            setFirstCard(card);\n    };\n\n    //Clear the chosen cards\n    const removeSelection = () => { \n        setFirstCard(null); \n        setSecondCard(null); \n    }\n\n    //Setting a new game\n    useEffect(() => { \n        setTimeout(async () => { \n            const cardsData = await getCountriesList();\n            setCardsArray(cardsData); \n            setFirstCard(null); \n            setSecondCard(null); \n            setToDisable(false);\n        }, 10); \n    }, []);\n\n    //Chekcing if theres a match between the chosen cards\n    useEffect(() => { \n        if (firstCard && secondCard) { \n            //If theres a match we remove the cards from the game by hiding them (in order to not delete data)\n            if (firstCard.country === secondCard.country) { \n                setCardsArray(removeCardsFromGame(cardsArray, firstCard, secondCard)); \n                removeSelection(); \n            \n            //Otherwise marking wrong match for styling and disabling choosing cards for 3 seconds\n            } else { \n                setCardsArray(changeIsWrongForSelectedCards(cardsArray, true, firstCard, secondCard))\n                setToDisable(true);\n                \n                setTimeout(() => {\n                    setToDisable(false);\n                    setCardsArray(changeIsWrongForSelectedCards(cardsArray, false, firstCard, secondCard))\n                    removeSelection(); \n                }, 3000); \n            } \n        } \n    }, [firstCard, secondCard]); \n\n    return (\n        <div className=\"container\"> \n            <Header/>\n            <CardsBoard\n                cardsArray={cardsArray}\n                handleSelectedCards={handleSelectedCards} \n                firstCard={firstCard} \n                toDisable={toDisable} />\n            <WinningBanner cardsArray={cardsArray}/>\n        </div> \n      ); \n}\n\nexport default QuizBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}