{"ast":null,"code":"import getCountriesListDb from \"./getCountriesListDb\";\nconst NUM_OF_COUNTRIES_IN_QUIZ = 5;\nasync function getCountriesListLogic() {\n  const countries = await getCountriesListDb();\n\n  //Choose NUM_OF_COUNTRIES_IN_QUIZ randomly\n  const selectedCountries = countries.sort(() => 0.5 - Math.random()).slice(0, NUM_OF_COUNTRIES_IN_QUIZ);\n  let countriesForGame = [];\n  let counterForId = 0;\n\n  //For each of the selected countries, create a card for its capital and add additional data\n  for (const country of selectedCountries) {\n    country.country = country.name.common;\n    country.capital = country.capital[0];\n    country.name = country.country;\n    country.isMatched = false;\n    country.isWrong = false;\n    country.id = counterForId;\n    const capital = {\n      name: country.capital,\n      country: country.country,\n      id: counterForId + 1,\n      isMatched: false,\n      isWrong: false,\n      capital: country.capital\n    };\n    countriesForGame.push(capital);\n    countriesForGame.push(country);\n    counterForId += 2;\n  }\n  return countriesForGame;\n}\nexport default getCountriesListLogic;","map":{"version":3,"names":["getCountriesListDb","NUM_OF_COUNTRIES_IN_QUIZ","getCountriesListLogic","countries","selectedCountries","sort","Math","random","slice","countriesForGame","counterForId","country","name","common","capital","isMatched","isWrong","id","push"],"sources":["/Users/chendimri/Desktop/CapitalQuiz/src/server/getCountriesList/getCountriesListLogic.ts"],"sourcesContent":["import ICard from \"../../interfaces/CardInterface\";\nimport getCountriesListDb from \"./getCountriesListDb\";\n\nconst NUM_OF_COUNTRIES_IN_QUIZ = 5;\n\nasync function getCountriesListLogic() {\n    const countries = await getCountriesListDb();\n\n    //Choose NUM_OF_COUNTRIES_IN_QUIZ randomly\n    const selectedCountries = countries.sort(() => 0.5 - Math.random()).slice(0, NUM_OF_COUNTRIES_IN_QUIZ);\n    let countriesForGame: ICard[] = [];\n    let counterForId = 0;\n\n    //For each of the selected countries, create a card for its capital and add additional data\n    for (const country of selectedCountries) {\n        country.country = country.name.common;\n        country.capital = country.capital[0];\n        country.name = country.country;\n        country.isMatched = false;\n        country.isWrong = false;\n        country.id = counterForId;\n\n        const capital = { name: country.capital, country: country.country, id: counterForId+1, isMatched: false, \n            isWrong: false, capital: country.capital };\n\n        countriesForGame.push(capital);\n        countriesForGame.push(country);\n        counterForId += 2;\n    }\n\n    return countriesForGame;\n}\n\nexport default getCountriesListLogic;\n"],"mappings":"AACA,OAAOA,kBAAkB,MAAM,sBAAsB;AAErD,MAAMC,wBAAwB,GAAG,CAAC;AAElC,eAAeC,qBAAqBA,CAAA,EAAG;EACnC,MAAMC,SAAS,GAAG,MAAMH,kBAAkB,CAAC,CAAC;;EAE5C;EACA,MAAMI,iBAAiB,GAAGD,SAAS,CAACE,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAEP,wBAAwB,CAAC;EACtG,IAAIQ,gBAAyB,GAAG,EAAE;EAClC,IAAIC,YAAY,GAAG,CAAC;;EAEpB;EACA,KAAK,MAAMC,OAAO,IAAIP,iBAAiB,EAAE;IACrCO,OAAO,CAACA,OAAO,GAAGA,OAAO,CAACC,IAAI,CAACC,MAAM;IACrCF,OAAO,CAACG,OAAO,GAAGH,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC;IACpCH,OAAO,CAACC,IAAI,GAAGD,OAAO,CAACA,OAAO;IAC9BA,OAAO,CAACI,SAAS,GAAG,KAAK;IACzBJ,OAAO,CAACK,OAAO,GAAG,KAAK;IACvBL,OAAO,CAACM,EAAE,GAAGP,YAAY;IAEzB,MAAMI,OAAO,GAAG;MAAEF,IAAI,EAAED,OAAO,CAACG,OAAO;MAAEH,OAAO,EAAEA,OAAO,CAACA,OAAO;MAAEM,EAAE,EAAEP,YAAY,GAAC,CAAC;MAAEK,SAAS,EAAE,KAAK;MACnGC,OAAO,EAAE,KAAK;MAAEF,OAAO,EAAEH,OAAO,CAACG;IAAQ,CAAC;IAE9CL,gBAAgB,CAACS,IAAI,CAACJ,OAAO,CAAC;IAC9BL,gBAAgB,CAACS,IAAI,CAACP,OAAO,CAAC;IAC9BD,YAAY,IAAI,CAAC;EACrB;EAEA,OAAOD,gBAAgB;AAC3B;AAEA,eAAeP,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}